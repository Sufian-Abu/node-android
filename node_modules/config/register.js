var crypto = require('crypto');
var rand = require('csprng');
var mongoose = require('mongoose');
var user = require('config/models');
 
 
 
exports.register = function(email,password,public_key,created_at,displayname,report,lat,lon,category,locationname,callback) {
 
var x = email;
if(!(x.indexOf("@")==x.length)){
if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/) && password.length > 4 && password.match(/[0-9]/) && password.match(/.[!,@,#,$,%,^,&,*,?,_,~]/)) {
 
var temp =rand(160, 36);
var newpass = temp + password;
var token = crypto.createHash('sha512').update(email +rand).digest("hex");
var hashed_password = crypto.createHash('sha512').update(newpass).digest("hex");
var public_key=public_key;
var created_at=created_at;
var newuser = new user({
    token: token,
    email: email,
    public_key:public_key,
    created_at:created_at,
    displayname:displayname,
    report:report,
    lat:lat,
    lon:lon,
    category:category,
    locationname:locationname,
    hashed_password: hashed_password,
    salt :temp });
 
user.find({email: email},function(err,users){

 
var len = users.length;
if(len == 0){
     newuser.save(function (err) {
 
     
  callback({
  "data": {
    
    "success" : {
       
      "message" : "Successful Registration",
      "accessToken" : token,
      "createdAt" : created_at,
      "public_key" : public_key
      
    },
    "status" : 200
  }
});
 
});
}else{
 
    callback({
  "data": {
    "error" : {
      "message" : "Email Already Registered",
      "errorCode" : "5000"
    },
    "status" : 5000
  }
});
 
}});}else{
 
    callback({
  "data": {
    "error" : {
      "message" : "Weak Password",
      "errorCode" : "5001"
    },
    "status" : 5001
  }
});
 
}}

else{
 
    callback({
  "data": {
    "error" : {
      "message" : "Email is not Valid",
      "errorCode" : "5002"
    },
    "status" : 5002
  }
});
 
}
}